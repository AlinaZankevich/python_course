# 14. Существует модуль itertools,
# предназначенный для выполнения распространенных операций над
# итерируемыми последовательностями, например, их объединения.
# В новом файле «D_chain.py» импортируйте созданные в
# предыдущих заданиях итерируемые объекты, объедините их в один
# и запустите проход циклом по нему:

import time
from A_increase import RangeIterable
from B_decrease import RangeIterableIterator
from C_sinus import SinusIterableWithGenerator
import itertools
# создаем цепочку итераторов из предыдущих заданий
main_iter = itertools.chain(
    RangeIterableIterator(32),
    RangeIterable(16),
    SinusIterableWithGenerator(64, 32)
)
# for line in main_iter:
#     print(line)
#     time.sleep(0.25)

# 15. Одним из видов итерируемых объектов являются строки текстовых файлов
# при чтении. Скопируйте в папку с проектом файл «food.csv», содержащий
# таблицу со строками стихотворения для игры в «съедобное-несъедобное» с
# названиями предметов в первой колонке и признак съедобности этих предметов
# во второй. В новом файле создайте программу для построчного вывода строк
# стихотворения в консоль, приема и проверки ответов пользователя:

import io

# главная программа:
# создание итерируемого объекта - строк файла
main_iter = io.open('food.csv')

# вывод инструкций
print("Игра \"Съедобное-несъедобное\".")
print("Вам будут по очереди выводится названия предметов.")
print("Вводите 0 если предмет несъедобный и 1 - если несъедобный.")
print("Для начала нажмите Enter.")
input()
score = 0

# проход по итерируемому объекту с помощью цикла
for line in main_iter:
    # разбиение строки на ячейки по точкам с запятой
    cells = line.split(';')
    # вывод текущего элемента
    print(cells[0])
    # ввод ответа
    inbuf = input()
    # проверка правильности ответа
    if inbuf[0] == cells[1][0]:
        print("Правильно!")
        score += 1
    else:
        print("Неправильно!")
# вывод набранных очков
print("Вы набрали " + str(score) + " очков.")
print("КОНЕЦ.")

# 16. Запустите созданную игру и сыграйте в нее.
#
# 17. Еще одним из видов итерируемых объектов являются перестановки
# и другие последовательности, генерируемые методами математического
# пакета NumPy. Скопируйте в папку с проектом файл «food2.csv»,
# содержащий таблицу с названиями предметов из предыдущего задания
# в первой колонке и признак съедобности этих предметов во второй.
# В новом файле создайте программу для создания случайной перестановки
# номеров строк файла и вывода названий предметов в полученном случайном
# порядке в консоль, приема и проверки ответов пользователя:

import io
import numpy


# главная программа:
# создание итерируемого объекта - строк файла
load_iter = io.open('food2.csv')
# преобразуем итератор в списки
lines = []
isFood = []
for line in load_iter:
    # разбиение строки на ячейки по точкам с запятой
    cells = line.split(';')
    # сохранение текущего элемента в списках
    lines += [cells[0]]
    isFood += [cells[1]]

# создаем случайную перестановку
# из порядковых номеров загруженных предметов,
# перестановка - итерируемый объект
main_iter = numpy.random.permutation(len(lines))

# вывод инструкций
print("Игра \"Съедобное-несъедобное\".")
print("Вам будут по очереди выводится названия предметов.")
print("Вводите 0 если предмет несъедобный и 1 - если несъедобный.")
print("Для начала нажмите Enter.")
input()
score = 0

# проход по итерируемому объекту с помощью цикла
for num in main_iter:
    # вывод текущего элемента
    print(lines[num])
    # ввод ответа
    inbuf = input()
    # проверка правильности ответа
    if inbuf[0] == isFood[num][0]:
        print("Правильно!")
        score += 1
    else:
        print("Неправильно!")

# вывод набранных очков
print("Вы набрали " + str(score) + " очков.")
print("КОНЕЦ.")



